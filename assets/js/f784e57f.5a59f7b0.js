"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[535],{3292:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"web/threat_modeling_browser\'s_storage","title":"Threat Modeling Browser\u2019s Storage","description":"Introduction","source":"@site/docs/web/Threat Modeling Browser\u2019s Storage.md","sourceDirName":"web","slug":"/web/threat_modeling_browser\'s_storage","permalink":"/web/threat_modeling_browser\'s_storage","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"threat_modeling_browser\'s_storage","title":"Threat Modeling Browser\u2019s Storage","sidebar_label":"tra_browser\'s_storage"},"sidebar":"tutorialSidebar","previous":{"title":"seku\'s blog : Insights from an AppSec Engineer","permalink":"/"}}');var r=i(4848),n=i(8453);const o={id:"threat_modeling_browser's_storage",title:"Threat Modeling Browser\u2019s Storage",sidebar_label:"tra_browser's_storage"},a="Threat Modeling Browser\u2019s Storage",c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Access to Client-Side Storage",id:"access-to-client-side-storage",level:2},{value:"Client-Side Storage",id:"client-side-storage",level:2},{value:"Cookies",id:"cookies",level:3},{value:"Who can access cookies associated with a domain?",id:"who-can-access-cookies-associated-with-a-domain",level:4},{value:"Same-Origin Access",id:"same-origin-access",level:5},{value:"Browser Access",id:"browser-access",level:5},{value:"Server-Side Access",id:"server-side-access",level:5},{value:"Security Considerations",id:"security-considerations",level:4},{value:"Web Storage API",id:"web-storage-api",level:3},{value:"<strong>Local Storage</strong>",id:"local-storage",level:5},{value:"Who can access Local Storage associated with a domain?",id:"who-can-access-local-storage-associated-with-a-domain",level:4},{value:"Same-Origin Access",id:"same-origin-access-1",level:5},{value:"Browser Access",id:"browser-access-1",level:5},{value:"Server-Side Access",id:"server-side-access-1",level:5},{value:"<strong>Session Storage</strong>",id:"session-storage",level:5},{value:"Who can access localStorage associated with a domain?",id:"who-can-access-localstorage-associated-with-a-domain",level:5},{value:"Same-Origin Access",id:"same-origin-access-2",level:6},{value:"Browser Access",id:"browser-access-2",level:6},{value:"Server-Side Access",id:"server-side-access-2",level:6},{value:"Security Considerations",id:"security-considerations-1",level:4},{value:"Key Difference between Cookies &amp; local/session Storage in terms of Security",id:"key-difference-between-cookies--localsession-storage-in-terms-of-security",level:3},{value:"Conclusion",id:"conclusion",level:3}];function d(e){const s={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",header:"header",img:"img",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"threat-modeling-browsers-storage",children:"Threat Modeling Browser\u2019s Storage"})}),"\n",(0,r.jsx)(s.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(s.p,{children:["In the early days of the World Wide Web, websites were primarily static. The server responded with the same static file (say ",(0,r.jsx)(s.code,{children:"home.html"})," for the home page) without any user-specific personalization on every request. Every visitor to any web application receives identical content from the server. As web applications evolved, the need to have personalized content tailored to each user became a necessity. Websites needed to store data and generate customized content in real time based on user interaction, specific requests, and/or backend processes. This required the servers to store user information and verify the user's identity when serving the requests. As HTTP is a stateless protocol, web applications require a way to store user-identifying information on the client side, which could be sent with every request. ",(0,r.jsx)(s.a,{href:"https://hiddenheroes.netguru.com/lou-montulli",children:"Thus, the cookie was born"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"The predominant architecture that emerged from all this involves server-side storage of user data, with browsers maintaining session information to identify logged-in users and facilitate personalized content delivery."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"cookie",src:i(9510).A+"",width:"853",height:"344"})}),"\n",(0,r.jsx)(s.p,{children:"Web applications have become integral to our lives as the internet has grown. Everything is moving to the web, and web applications are becoming sophisticated and feature-rich. The data the server needs to send on each request is growing exponentially. If data is only stored on the server and transmitted on each request, the load times for each website would be very high. Storing some of the information from previous requests on the client end significantly increases the response times, removes the burden on the server to serve huge amounts of data in each request, and allows the javascript running on the browser to give unique user experiences.\nToday, web applications store significant information on the client side in the browsers."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"pa_user",src:i(6586).A+"",width:"964",height:"339"})}),"\n",(0,r.jsx)(s.p,{children:"As more websites are being built to store significant data on the client side, it is becoming a prime target for attackers. As there are multiple ways of storing this data on the browser, each coming with its own advantages and disadvantages, it becomes essential for development teams to learn about the risks associated with each form of storage and ensure safeguards are in place to address the issue."}),"\n",(0,r.jsx)(s.h2,{id:"access-to-client-side-storage",children:"Access to Client-Side Storage"}),"\n",(0,r.jsxs)(s.p,{children:["Like any other program in your operating system, browsers run as a process. When it's running, this process gets its own set of memory. In multithreaded systems, this process can spawn o\nprocesses, which are child-to-parent processes. In most modern browsers, a site is run as an isolated child process that has only access to its data in the memory.  A process can write to disk and fetch from it. Most modern operating systems have discretionary access control, meaning access to data is based on the user's identity. This means that anything stored on the client side by any web application is stored within files that high-privileged users can access, say, Administrators and root users (and malware that has gained permission from said high-privileged users). For example, Mozilla stores all of its cookies inside a file called cookies.sqlite, which resides within ",(0,r.jsx)(s.a,{href:"https://stackoverflow.com/questions/7610896/how-do-i-use-sqlite-to-read-data-from-the-firefox-cookies-file",children:"Mozilla's profile directory"}),". It takes a simple SQLite3 reader to parse the file and ",(0,r.jsx)(s.a,{href:"https://www.blackhillsinfosec.com/your-browser-is-not-a-safe-space/",children:"extract sensitive information"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["The Same-origin Policy governs access to client-side information for the sites rendered in a browser. A document's origin is a unique identifier that combines protocol (https://), domain (",(0,r.jsx)(s.a,{href:"http://example.com/",children:"example.com"}),"), and port number (443)."]}),"\n",(0,r.jsxs)(s.p,{children:["The same-origin policy states ",(0,r.jsxs)(s.a,{href:"https://en.wikipedia.org/wiki/Same-origin_policy",children:["that a web browser permits scripts contained in a first web page to access data on a second web page, but only if both web pages have the same ",(0,r.jsx)(s.em,{children:"origin"})]}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["Two URLs have the ",(0,r.jsx)(s.em,{children:"same origin"})," if the"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Protocol",children:"protocol"}),","]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Port",children:"port"})," (if specified), and"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Host",children:"Host"})," is the same for both URLs."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:'Websites with the same scheme, hostname, and port combination are considered "same-origin."'}),"\n",(0,r.jsxs)(s.p,{children:["Here's a table illustrating Same-Origin Policy scenarios using ",(0,r.jsx)(s.em,{children:(0,r.jsx)(s.strong,{children:"sureshpantha.com.np"})})," as the base origin:"]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Origin"}),(0,r.jsx)(s.th,{children:"Same/Different"}),(0,r.jsx)(s.th,{children:"Reason"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"https://sureshpantha.com.np",children:"https://sureshpantha.com.np"})}),(0,r.jsx)(s.td,{children:"Same Origin"}),(0,r.jsx)(s.td,{children:"Identical protocol, hostname, port"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"http://sureshpantha.com.np",children:"http://sureshpantha.com.np"})}),(0,r.jsx)(s.td,{children:"Different Origin"}),(0,r.jsx)(s.td,{children:"Different protocol (http vs https)"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"https://www.sureshpantha.com.np",children:"https://www.sureshpantha.com.np"})}),(0,r.jsx)(s.td,{children:"Different Origin"}),(0,r.jsx)(s.td,{children:"Different subdomain"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"https://sureshpantha.com.np:8080",children:"https://sureshpantha.com.np:8080"})}),(0,r.jsx)(s.td,{children:"Different Origin"}),(0,r.jsx)(s.td,{children:"Different port"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"https://example.com",children:"https://example.com"})}),(0,r.jsx)(s.td,{children:"Different Origin"}),(0,r.jsx)(s.td,{children:"Different hostname"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"https://sureshpantha.com.np/page",children:"https://sureshpantha.com.np/page"})}),(0,r.jsx)(s.td,{children:"Same Origin"}),(0,r.jsx)(s.td,{children:"Path doesn't affect origin"})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"client-side-storage",children:"Client-Side Storage"}),"\n",(0,r.jsx)(s.p,{children:"Browsers store information about users, sessions, or site preferences directly on the client device, which is client-side storage. By storing data on the client side, developers can significantly reduce load times and make websites more responsive and reliable. Storing sensitive data on the client side opens it up to attacks and can lead to significant exposure. Understanding how data is stored and accessed helps web developers decide where to store data safely."}),"\n",(0,r.jsx)(s.p,{children:"In modern web applications, we can store data in the client's browser in one of the following ways:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies",children:(0,r.jsx)(s.strong,{children:"Cookies"})})}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API",children:(0,r.jsx)(s.strong,{children:"Web Storage API"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage",children:(0,r.jsx)(s.strong,{children:"Local Storage"})})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage",children:(0,r.jsx)(s.strong,{children:"Session Storage"})})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"cookies",children:"Cookies"}),"\n",(0,r.jsxs)(s.p,{children:["HTTP cookies are data stored in the client\u2019s device, which enables websites to track sessions, remember user preferences, and personalize web experiences. A cookie is transmitted through the ",(0,r.jsx)(s.code,{children:"Cookie"})," Header after being set by the server using the ",(0,r.jsx)(s.code,{children:"Set-Cookie"})," response header."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"cookie",src:i(5213).A+"",width:"1050",height:"562"})}),"\n",(0,r.jsx)(s.p,{children:"Along with the key-value pair, the server can set an expiry date after which the cookie expires. If no date is set, session cookies (without an expiration date) expire when the browser is closed. Persistent cookies without an explicit expiry date typically default to not being set, which means they won't be automatically stored or transmitted after the current browsing session ends.\nThe cookies set for a site are sent to the server for every subsequent request."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"cookie-send",src:i(6582).A+"",width:"1071",height:"569"})}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Attribute"})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Details"})})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Use Case"})}),(0,r.jsx)(s.td,{children:"Small Pieces of information about user preferences, user tracking, session management, and remembering stateful information"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Expiration"})}),(0,r.jsx)(s.td,{children:"Session-based (deleted when session is closed ), can be made persistent by setting up expiry date"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Data Capacity"})}),(0,r.jsxs)(s.td,{children:["4 KB per cookie. Each browser has a threshold for ",(0,r.jsx)(s.a,{href:"http://browsercookielimits.iain.guru/",children:"how many cookies are allowed per site"}),"."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Constraints"})}),(0,r.jsx)(s.td,{children:"- Cookies are sent with every request to the server- Access to cookies are subject to security policies and same-origin restrictions"})]})]})]}),"\n",(0,r.jsx)(s.h4,{id:"who-can-access-cookies-associated-with-a-domain",children:"Who can access cookies associated with a domain?"}),"\n",(0,r.jsx)(s.p,{children:"In terms of access to the data stored inside the cookies,"}),"\n",(0,r.jsx)(s.h5,{id:"same-origin-access",children:"Same-Origin Access"}),"\n",(0,r.jsxs)(s.p,{children:["A cookie set by ",(0,r.jsx)(s.code,{children:"example.com"})," can be accessed by any JavaScript running on any page from the same origin by default. We can also explicitly specify which subpages have access to the cookie using the ",(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#define_where_cookies_are_sent",children:"Path attribute"}),"."]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"Path"})," attribute indicates a URL path that must exist in the requested URL in order to send the ",(0,r.jsx)(s.code,{children:"Cookie"})," header."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Cookies can be accessed by subdomains if the ",(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#define_where_cookies_are_sent",children:"Domain attribute"})," is set while the cookie is being set."]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"Domain"})," attribute specifies which server can receive a cookie. If specified, cookies are available on the specified server and its subdomains. For example, if you set ",(0,r.jsx)(s.code,{children:"Domain=mozilla.org"})," from ",(0,r.jsx)(s.code,{children:"mozilla.org"}),", cookies are available on that domain and subdomains like ",(0,r.jsx)(s.code,{children:"developer.mozilla.org"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Access to cookie data by Javascript can be completely ",(0,r.jsx)(s.a,{href:"https://portswigger.net/web-security/csrf/bypassing-samesite-restrictions",children:"almost"})," restricted by using the ",(0,r.jsx)(s.code,{children:"HttpOnly"})," flag. This ensures that the cookie is safe from XXS vulnerabilities present in the page."]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:["A cookie with the ",(0,r.jsx)(s.code,{children:"HttpOnly"})," attribute can't be accessed by JavaScript, for example using ",(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie",children:(0,r.jsx)(s.code,{children:"Document.cookie"})}),"; it can only be accessed when it reaches the server. Cookies that persist user sessions for example should have the ",(0,r.jsx)(s.code,{children:"HttpOnly"})," attribute set \u2014 it would be really insecure to make them available to JavaScript. This precaution helps mitigate cross-site scripting (",(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/Security/Types_of_attacks#cross-site_scripting_xss",children:"XSS"}),") attacks."]}),"\n"]}),"\n",(0,r.jsx)(s.h5,{id:"browser-access",children:"Browser Access"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Users can view and delete cookies through browser settings/dev tools."}),"\n",(0,r.jsx)(s.li,{children:"Browser extensions with appropriate permissions can access cookies."}),"\n",(0,r.jsx)(s.li,{children:"The browser itself manages and enforces cookie access controls."}),"\n"]}),"\n",(0,r.jsx)(s.h5,{id:"server-side-access",children:"Server-Side Access"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"The web server of the domain that sets the cookie receives cookies in HTTP requests"}),"\n",(0,r.jsx)(s.li,{children:"Back-end services of that domain can process cookie data"}),"\n",(0,r.jsx)(s.li,{children:"Load balancers/proxies in front of the server may also see cookies"}),"\n"]}),"\n",(0,r.jsx)(s.h4,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Cookies are protected using the same origin policy, where data stored is scoped to the document\u2019s origin, meaning the webpage can only access data if it has the same origin by default."}),"\n",(0,r.jsx)(s.li,{children:"This means that if an attacker can inject JavaScript into a webpage (XSS), that attacker-controlled JavaScript can access all stored cookies in the client\u2019s browser."}),"\n",(0,r.jsx)(s.li,{children:"As cookies have to be sent with each request, they can be stolen if an attacker gets access to these requests eg . Load balancers/proxies"}),"\n",(0,r.jsxs)(s.li,{children:["Several attributes have been introduced which can be sent with the Set-Cookie header to ensure the browser handles cookies in a certain way;","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"Secure"})," attribute instructs the browser to only send the cookie over encrypted HTTPS connections."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Cookies with ",(0,r.jsx)(s.code,{children:"HTTPOnly"})," attribute are not accessible from Javascript and, therefore, unaffected by cross-site scripting (XSS) attacks."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Cookies' ",(0,r.jsx)(s.code,{children:"Path"})," and ",(0,r.jsx)(s.code,{children:"Domain"})," attributes precisely control cookie accessibility across web applications."]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"Path"})," attribute restricts a cookie to specific server routes\u2014for instance, setting ",(0,r.jsx)(s.code,{children:"Path=/admin"})," ensures a cookie is only accessible within administrative sections, preventing other application segments from reading it."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Similarly, the ",(0,r.jsx)(s.code,{children:"Domain"})," attribute allows cookie sharing across subdomains; using ",(0,r.jsx)(s.code,{children:"Domain=.example.com"})," enables a single cookie to be valid for ",(0,r.jsx)(s.code,{children:"blog.example.com"}),", ",(0,r.jsx)(s.code,{children:"store.example.com"}),", and ",(0,r.jsx)(s.code,{children:"www.example.com"}),", facilitating unified authentication and tracking across different service endpoints while maintaining security boundaries."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"The SameSite cookie attribute controls how cookies are handled in cross-site requests, helping protect against Cross-Site Request Forgery (CSRF) attacks. It offers three settings:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Strict (most secure, only sends cookies in first-party context),"}),"\n",(0,r.jsx)(s.li,{children:"Lax (default, allows cookies in top-level navigations), and"}),"\n",(0,r.jsx)(s.li,{children:"None (allows cross-site cookie transmission, requires Secure flag)."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"web-storage-api",children:(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API",children:"Web Storage API"})}),"\n",(0,r.jsx)(s.p,{children:"Web storage API provides a mechanism to store key-value pairs in the browser. It is generally divided into Local Storage and Session Storage."}),"\n",(0,r.jsx)(s.h5,{id:"local-storage",children:(0,r.jsx)(s.strong,{children:"Local Storage"})}),"\n",(0,r.jsxs)(s.p,{children:["Local storage is a feature in web browsers that lets web developers save data in users' browsers. It is part of the Web Storage API along with Session Storage. When users request a webpage, the server sends data and the Javascript code to save in the browser \u2014 local Storage stores data as key-value pairs. Data saved through local storage persists on the browser when the page is closed or refreshed. Data in localStorage is saved using the ",(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem",children:"localStorage.setItem()"})," method."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"localset",src:i(260).A+"",width:"1208",height:"758"})}),"\n",(0,r.jsxs)(s.p,{children:["The stored data can be retrieved by the javascript running on the browser with it's key by using the ",(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem",children:'localStorage.getItem("key")'})]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{alt:"localget",src:i(6624).A+"",width:"2000",height:"654"})}),"\n",(0,r.jsxs)(s.p,{children:["Once stored in Local Storage, data must be cleared explicitly ( using methods like ",(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem",children:"removeItem()"})," and ",(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Storage/clear",children:"clear()"})," ); i.e., it remains unless explicitly cleared. Data stored in Local Storage is scoped to the document's origin."]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Attribute"})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Details"})})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Use Case"})}),(0,r.jsx)(s.td,{children:"Storing larger amounts of data client-side, web app configurations, non-sensitive user preferences, offline data, cached assets"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Expiration"})}),(0,r.jsx)(s.td,{children:"Persistent until explicitly cleared by code or user. Survives browser restarts and OS reboots"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Data Capacity"})}),(0,r.jsx)(s.td,{children:"~ 5-10 MB (varies by browser). Significantly larger than cookies"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Constraints"})}),(0,r.jsx)(s.td,{children:"- JavaScript access only (no server access)- Same-origin policy applies- Synchronous operations can block main thread"})]})]})]}),"\n",(0,r.jsx)(s.h4,{id:"who-can-access-local-storage-associated-with-a-domain",children:"Who can access Local Storage associated with a domain?"}),"\n",(0,r.jsx)(s.h5,{id:"same-origin-access-1",children:"Same-Origin Access"}),"\n",(0,r.jsx)(s.p,{children:"Similar to the cookie, access to localStorage is governed by the Same-Origin Policy. Data stored in the Local Storage is shared between all tabs and windows from the same origin. There are no attributes that can restrict access to data stored in localStorage."}),"\n",(0,r.jsx)(s.h5,{id:"browser-access-1",children:"Browser Access"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Users can view and clear localStorage data through browser developer tools or settings"}),"\n",(0,r.jsx)(s.li,{children:"Browser extensions with appropriate permissions can read/modify localStorage content"}),"\n",(0,r.jsx)(s.li,{children:"The browser will control access to localStorage by an application using the same-origin policy, so data is accessible only for scripts from the same domain that created it."}),"\n",(0,r.jsx)(s.li,{children:"Unlike cookies, localStorage data persists indefinitely until explicitly cleared by the user or application."}),"\n",(0,r.jsx)(s.li,{children:"The browser enforces a storage limit (usually around 5-10 MB) for localStorage per domain."}),"\n"]}),"\n",(0,r.jsx)(s.h5,{id:"server-side-access-1",children:"Server-Side Access"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"The web server and backend services cannot directly access localStorage data since it remains client-side only."}),"\n",(0,r.jsx)(s.li,{children:"localStorage data is not automatically sent with HTTP requests like cookies are."}),"\n",(0,r.jsx)(s.li,{children:"You need to share data in localStorage with the server: You need to consciously read it using JavaScript and send it using AJAX/fetch requests or form submissions."}),"\n",(0,r.jsx)(s.li,{children:"Load balancers and proxies never see localStorage data because it remains within the browser."}),"\n"]}),"\n",(0,r.jsx)(s.h5,{id:"session-storage",children:(0,r.jsx)(s.strong,{children:"Session Storage"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"sessionStorage"})," is similar to ",(0,r.jsx)(s.code,{children:"localStorage"}),", but stores data only needed for the current session. The data is cleared when the user navigates away from the page, or the browser is closed."]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Attribute"})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.strong,{children:"Details"})})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Use Case"})}),(0,r.jsx)(s.td,{children:"Temporary data storage during a single page session, form data backup, per-tab state management, temporary user preferences"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Expiration"})}),(0,r.jsx)(s.td,{children:"Data persists only for the duration of the page session. Cleared when tab/window is closed"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Data Capacity"})}),(0,r.jsx)(s.td,{children:"~5-10 MB (varies by browser). Similar to localStorage"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Constraints"})}),(0,r.jsx)(s.td,{children:"- JavaScript access only (no server access)- Same-origin policy applies- Limited to single browser tab/window which created the session storage- Synchronous operations"})]})]})]}),"\n",(0,r.jsx)(s.h5,{id:"who-can-access-localstorage-associated-with-a-domain",children:"Who can access localStorage associated with a domain?"}),"\n",(0,r.jsx)(s.h6,{id:"same-origin-access-2",children:"Same-Origin Access"}),"\n",(0,r.jsx)(s.p,{children:"Similar to localStorage, access to localStorage is governed by the Same-Origin Policy. Unlike localStorage, data stored in sessionStorage is not shared between all tabs and windows from the same origin. It is only accessible within the same tab/window that created it. Each tab/window gets its own separate sessionStorage instance, even from the same origin."}),"\n",(0,r.jsx)(s.h6,{id:"browser-access-2",children:"Browser Access"}),"\n",(0,r.jsx)(s.p,{children:"In terms of Browser Access, access to sessionStorage is similar to that of localStorage except for two distinct differences,"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Unlike localStorage, sessionStorage data is cleared automatically when the tab/window is closed."}),"\n",(0,r.jsx)(s.li,{children:"Each browser tab maintains its own separate sessionStorage instance, even for the same domain."}),"\n"]}),"\n",(0,r.jsx)(s.h6,{id:"server-side-access-2",children:"Server-Side Access"}),"\n",(0,r.jsx)(s.p,{children:"Server-Side Access of sessionStorage is similar to that of the localStorage."}),"\n",(0,r.jsx)(s.h4,{id:"security-considerations-1",children:"Security Considerations"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Same Origin Policy applies for Local Storage and Session Storage. Access to data is protected using the same origin policy, where data stored is scoped to the document\u2019s origin, meaning the webpage can only access data if it has the same origin by default."}),"\n",(0,r.jsxs)(s.li,{children:["Local Storage and Session Storage is accessible to Javascript running on the pages with the same origin. Any XSS vulnerabilities present in the site, poses significant risk. There is also no equivalent attribute like ",(0,r.jsx)(s.code,{children:"HTTPOnly"})," which can be used. Thus storing any critical data is not recommended."]}),"\n",(0,r.jsx)(s.li,{children:"All data in Local Storage and Session Storage is not encrypted by default and stored in plain text. Encrypting client side storage is a difficult problem to solve and not straight forward."}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"key-difference-between-cookies--localsession-storage-in-terms-of-security",children:"Key Difference between Cookies & local/session Storage in terms of Security"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Cookies are sent with every request but local/session Storage  which decreases the attack surface."}),"\n",(0,r.jsxs)(s.li,{children:["Javascript running on pages within the same origin can access data stored in local/session Storage, while we can deny access to cookies by using attributes like ",(0,r.jsx)(s.code,{children:"HTTPOnly"}),"."]}),"\n",(0,r.jsx)(s.li,{children:"There are no built-in attributes for security configuration for local/session Storage but access to cookies can be configured using built-in attributes."}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["The difference between localStorage and cookies is mostly about what is being stored and intended use cases,","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Cookies are better for session management and authentication, Security-sensitive information (when properly configured), and data that needs to be sent to the server in each request for Server-side processing."}),"\n",(0,r.jsx)(s.li,{children:"localStorage is better for client-side data, UI preferences, Cached data, and Non-sensitive information."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Cookies should be used for session management and authentication because of their flexible security controls. It is also vital to have proper restrictions in place for access to cookies with available security attributes instead of relying on localStorage, which doesn't support these built-in protections."})]})}function h(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},6582:(e,s,i)=>{i.d(s,{A:()=>t});const t=i.p+"assets/images/cookie-send-9c9105eb7e989bbf8a78d272ee3075ab.png"},5213:(e,s,i)=>{i.d(s,{A:()=>t});const t=i.p+"assets/images/cookie-50d8cde6c5976522e8fccac18372ef7c.png"},6624:(e,s,i)=>{i.d(s,{A:()=>t});const t=i.p+"assets/images/localget-ebd5e66e053b0523078b8708659a1e4b.png"},260:(e,s,i)=>{i.d(s,{A:()=>t});const t=i.p+"assets/images/localset-c5598032992f8e722089f38e6b8b21bf.png"},9510:(e,s,i)=>{i.d(s,{A:()=>t});const t=i.p+"assets/images/pa-f566e0d79d94488408384061421b484a.png"},6586:(e,s,i)=>{i.d(s,{A:()=>t});const t=i.p+"assets/images/pa_user-da6d1cba2ba15ba34409c709a9c1e352.png"},8453:(e,s,i)=>{i.d(s,{R:()=>o,x:()=>a});var t=i(6540);const r={},n=t.createContext(r);function o(e){const s=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(n.Provider,{value:s},e.children)}}}]);